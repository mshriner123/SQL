Schema:

Movie (mID, title, year, director) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer (rID, name) 
English: The reviewer with ID number rID has a certain name. 

Rating (rID, mID, stars, ratingDate) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

Below are some of my answers to questions from the edX course Databases: Relational Databases and SQL
The above schema is also from the edX course Databases: Relational Databases and SQL

My queries were executed using SQLite.


For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings 
given to that movie. Sort by rating spread from highest to lowest, then by movie title.

select title, (max(stars) - min(stars)) as Rating_Spread
from Movie 
inner join Rating using (mId)
group by mID
order by Rating_Spread desc, title;


Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. 
(Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. 
Don't just calculate the overall average rating before and after 1980.)

select avg (before1980.avg) - avg(after1980.avg)
from (
	select avg (stars) as avg 
	from Movie 
	inner join Rating using (mId)
	where Movie.year < 1980
	group by mID
	)as before1980,(
	select avg (stars) as avg 
	from Movie 
	inner join Rating using (mId)
	where Movie.year > 1980
	group by mID
	)as after1980;


For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number 
of stars. Sort by movie title.

select title, max(stars)
from Movie 
inner join Rating using (mID)
group by mID
order by title;


For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, 
return the reviewer's name and the title of the movie.

SELECT name, title
FROM Movie
INNER JOIN Rating R1 USING(mId)
INNER JOIN Rating R2 USING(rId)
INNER JOIN Reviewer USING (rID)
where R1.mID = R2.mID and R1.ratingDate < R2.ratingDate and R1.stars < R2.stars;


Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. 
Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.

select name, title, stars, ratingDate
from Movie natural join Rating natural join Reviewer
order by name, title, stars;






Schema:

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, 
there is no guarantee that (456, 123) is also present. 

Below are some of my answers to questions from the edX course Databases: Relational Databases and SQL
The above schema is also from the edX course Databases: Relational Databases and SQL

My queries were executed using SQLite.

Q1) Find the names of all students who are friends with someone named Gabriel.

select H1.name
from Highschooler H1
inner join friend on H1.ID = Friend.ID1
inner join Highschooler H2 on H2.ID = Friend.ID2
where H2.name = "Gabriel";

Q2) For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the 
name and grade of the student they like.

select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1
inner join likes on H1.ID = likes.ID1
inner join Highschooler H2 on H2.ID = likes.ID2
where H1.grade >= H2.grade + 2;

Q3) For every pair of students who both like each other, return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order.

select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Highschooler H2, Likes L1, Likes L2
where (H1.ID = L1.ID1 and H2.ID = L1.ID2) and (H2.ID = L2.ID1 and H1.ID = L2.ID2) and 
H1.name < H2.name
order by H1.name, H2.name;

Q4) Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. 
Sort by grade, then by name within each grade.

select name, grade 
from Highschooler
where not ID in (
	select distinct ID1 from likes 
	union 
	select distinct ID2 from likes
		)
order by grade, name;

Q5) For every situation where student A likes student B, but we have no information about whom B likes 
(that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.

select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1
inner join Likes on H1.ID = Likes.ID1
inner join Highschooler H2 on H2.ID = Likes.ID2
where not H2.ID in (select distinct ID1 from Likes);

Q6) Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.

select H1.name, H1.grade 
from Highschooler H1
where not H1.ID in (
	select ID1
	from Friend F1, Highschooler H2
	where (H1.ID = F1.ID1 and H2.ID = F1.ID2) and (H1.grade <> H2.grade)
	) and H1.ID in (
		select ID1
		from Friend F2, Highschooler H3
		where (H1.ID = F2.ID1 and H3.ID = F2.ID2) and (H1.grade = H3.grade)
		)
order by H1.grade, H1.name;

Q7) For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). 
For all such trios, return the name and grade of A, B, and C.

select H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
from Highschooler H1, Highschooler H3
inner join Likes on H1.ID = ID1
inner join Highschooler H2 on H2.ID = ID2
where H1.ID not in (
	select ID1 from Friend where ID2 = H2.ID
	) 
and H1.ID in (
	select ID1 from Friend where ID2 = H3.ID) and 
	H2.ID in (select ID1 from Friend where ID2 = H3.ID
			 );
       
Q8) Find the difference between the number of students in the school and the number of different first names.

select count(*) - count (distinct name)
from Highschooler;

Q9) Find the name and grade of all students who are liked by more than one other student.

select distinct name, grade 
from Highschooler, Likes
where (select count(ID2) from Likes where ID = ID2) >= 2;





